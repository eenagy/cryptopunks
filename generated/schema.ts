// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Address extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Address entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Address entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Address", id.toString(), this);
  }

  static load(id: string): Address | null {
    return store.get("Address", id) as Address | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class TenancyDates extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TenancyDates entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TenancyDates entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TenancyDates", id.toString(), this);
  }

  static load(id: string): TenancyDates | null {
    return store.get("TenancyDates", id) as TenancyDates | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get start(): BigInt {
    let value = this.get("start");
    return value.toBigInt();
  }

  set start(value: BigInt) {
    this.set("start", Value.fromBigInt(value));
  }

  get end(): BigInt {
    let value = this.get("end");
    return value.toBigInt();
  }

  set end(value: BigInt) {
    this.set("end", Value.fromBigInt(value));
  }
}

export class Provenance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Provenance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Provenance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Provenance", id.toString(), this);
  }

  static load(id: string): Provenance | null {
    return store.get("Provenance", id) as Provenance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cryptopunk(): string {
    let value = this.get("cryptopunk");
    return value.toString();
  }

  set cryptopunk(value: string) {
    this.set("cryptopunk", Value.fromString(value));
  }

  get tenant(): string {
    let value = this.get("tenant");
    return value.toString();
  }

  set tenant(value: string) {
    this.set("tenant", Value.fromString(value));
  }

  get tenancyDates(): string {
    let value = this.get("tenancyDates");
    return value.toString();
  }

  set tenancyDates(value: string) {
    this.set("tenancyDates", Value.fromString(value));
  }
}

export class Cryptopunk extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Cryptopunk entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Cryptopunk entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Cryptopunk", id.toString(), this);
  }

  static load(id: string): Cryptopunk | null {
    return store.get("Cryptopunk", id) as Cryptopunk | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tenant(): string | null {
    let value = this.get("tenant");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tenant(value: string | null) {
    if (value === null) {
      this.unset("tenant");
    } else {
      this.set("tenant", Value.fromString(value as string));
    }
  }

  get provenance(): Array<string> | null {
    let value = this.get("provenance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set provenance(value: Array<string> | null) {
    if (value === null) {
      this.unset("provenance");
    } else {
      this.set("provenance", Value.fromStringArray(value as Array<string>));
    }
  }
}
